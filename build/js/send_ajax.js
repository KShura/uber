var Form = (function () {
    function Form(form, url, dataArray, form_type) {
        this.form = form;
        this.url = url;
        this.dataArray = dataArray;
        this.form_type = form_type;
    }
    Form.prototype.validation = function () {
        var valid = true;
        $.each($(this.form).find('input.requi#d02121'), function (i, val) {
            if ($(this).val() == "") {
                valid = false;
                $(this).css('border', '2px solid #d02121');
                if ($(this).siblings().is(".error_message")) {
                    $(this).siblings('.error_message').show();
                }
            }
            else {
                $(this).css('border', '');
                if ($(this).siblings().is(".error_message")) {
                    $(this).siblings('.error_message').hide();
                }
            }
        });
        return valid;
    };
    Form.prototype.ajax = function () {
        var name = $(this.form).find("input[name='name']").val();
        var phone = $(this.form).find("input[name='phone']").val();
        var valid = this.validation();
        if (valid) {
            $.ajax({
                type: "POST",
                url: this.url,
                processData: false,
                contentType: false,
                data: this.dataArray
            }).done(function (res) {
                if (res) {
                    showSuccess(this.form_type);
                }
            }).fail(function (res) {
                console.log(res);
            });
        }
    };
    return Form;
}());
$(function () {
    $('form').submit(function (e) {
        e.preventDefault();
        var dataArray = $(this).serializeArray();
        var form_type = $(this).attr('form-type');
        var url = $(this).attr('action');
        var form = new Form(this, url, dataArray, form_type);
        var formData = new FormData(this);
        var response = form.ajax();
    });
    $('input[type="file"]').change(function () {
        var val = $(this).val();
        var regV = /[^\\/]+\.[A-Za-z]+/gi;
        var result = val.match(regV);
        if (result != null) {
            $(this).siblings('span').html(result);
        }
        else {
            $(this).siblings('span').html('Добавить фото');
        }
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakQsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2VuZF9hamF4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInBvcHVwcy50c1wiIC8+XHJcbmludGVyZmFjZSBpRm9ybSB7XHJcbiAgZm9ybTogSFRNTEZvcm1FbGVtZW50O1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIGRhdGFBcnJheTogYW55W107XHJcbiAgZm9ybV90eXBlOiBzdHJpbmc7XHJcbiAgdmFsaWRhdGlvbigpOiBib29sZWFuO1xyXG4gIGFqYXgoKTogdm9pZDtcclxufVxyXG5cclxuY2xhc3MgRm9ybSBpbXBsZW1lbnRzIGlGb3JtIHtcclxuICBmb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XHJcbiAgdXJsOnN0cmluZztcclxuICBkYXRhQXJyYXk6IGFueVtdO1xyXG4gIGZvcm1fdHlwZTogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yIChmb3JtOkhUTUxGb3JtRWxlbWVudCwgdXJsOnN0cmluZywgZGF0YUFycmF5OmFueSwgZm9ybV90eXBlOnN0cmluZykge1xyXG4gICAgdGhpcy5mb3JtID0gZm9ybTtcclxuICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgdGhpcy5kYXRhQXJyYXkgPSBkYXRhQXJyYXk7XHJcbiAgICB0aGlzLmZvcm1fdHlwZSA9IGZvcm1fdHlwZTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRpb24oKSA6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHZhbGlkOmJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgICQuZWFjaCgkKHRoaXMuZm9ybSkuZmluZCgnaW5wdXQucmVxdWkjZDAyMTIxJyksIGZ1bmN0aW9uKGksIHZhbCkge1xyXG4gICAgICBpZigkKHRoaXMpLnZhbCgpID09IFwiXCIpIHtcclxuICAgICAgICB2YWxpZCA9IGZhbHNlOyBcclxuICAgICAgICAkKHRoaXMpLmNzcygnYm9yZGVyJywgJzJweCBzb2xpZCAjZDAyMTIxJyk7XHJcbiAgICAgICAgaWYgKCQodGhpcykuc2libGluZ3MoKS5pcyhcIi5lcnJvcl9tZXNzYWdlXCIpKSB7IFxyXG4gICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygnLmVycm9yX21lc3NhZ2UnKS5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICQodGhpcykuY3NzKCdib3JkZXInLCAnJyk7IFxyXG4gICAgICAgIGlmICAoJCh0aGlzKS5zaWJsaW5ncygpLmlzKFwiLmVycm9yX21lc3NhZ2VcIikpIHsgXHJcbiAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCcuZXJyb3JfbWVzc2FnZScpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdmFsaWQ7XHJcbiAgfVxyXG5cclxuICBhamF4KCk6IHZvaWQge1xyXG4gICAgbGV0IG5hbWU6c3RyaW5nID0gICQodGhpcy5mb3JtKS5maW5kKFwiaW5wdXRbbmFtZT0nbmFtZSddXCIpLnZhbCgpOyAgIFxyXG5cclxuICAgIGxldCBwaG9uZSA9ICAkKHRoaXMuZm9ybSkuZmluZChcImlucHV0W25hbWU9J3Bob25lJ11cIikudmFsKCk7XHJcblxyXG4gICAgbGV0IHZhbGlkOmJvb2xlYW4gPSB0aGlzLnZhbGlkYXRpb24oKTtcclxuICAgIGlmKHZhbGlkKSB7XHJcbiAgICAgICQuYWpheCh7XHJcbiAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgdXJsOiB0aGlzLnVybCxcclxuICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXHJcbiAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxyXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YUFycmF5XHJcbiAgICAgIH0pLmRvbmUoZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgaWYocmVzKSB7XHJcbiAgICAgICAgICBzaG93U3VjY2Vzcyh0aGlzLmZvcm1fdHlwZSk7ICAgXHJcbiAgICAgICAgfSAgICAgICAgICBcclxuICAgICAgfSkuZmFpbChmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuJChmdW5jdGlvbigpIHtcclxuICAgICAgJCgnZm9ybScpLnN1Ym1pdChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyBcclxuICAgICAgXHJcbiAgICAgICAgbGV0IGRhdGFBcnJheSA9ICQodGhpcykuc2VyaWFsaXplQXJyYXkoKTtcclxuICAgICAgICBsZXQgZm9ybV90eXBlID0gJCh0aGlzKS5hdHRyKCdmb3JtLXR5cGUnKTtcclxuICAgICAgICBsZXQgdXJsID0gJCh0aGlzKS5hdHRyKCdhY3Rpb24nKTtcclxuICAgICAgICBsZXQgZm9ybTpGb3JtID0gbmV3IEZvcm0odGhpcywgdXJsLCBkYXRhQXJyYXksIGZvcm1fdHlwZSk7XHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRoaXMpO1xyXG4gICAgICAgIGxldCByZXNwb25zZSA9IGZvcm0uYWpheCgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICQoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCB2YWwgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgIGxldCByZWdWID0gL1teXFxcXC9dK1xcLltBLVphLXpdKy9naTsgXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHZhbC5tYXRjaChyZWdWKTtcclxuICAgICAgICBpZihyZXN1bHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygnc3BhbicpLmh0bWwocmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygnc3BhbicpLmh0bWwoJ9CU0L7QsdCw0LLQuNGC0Ywg0YTQvtGC0L4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG59KTsgICAgICAiXSwic291cmNlUm9vdCI6Ii9zcmMvdHMifQ==
